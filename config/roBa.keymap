#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>; //edited by yura 20250915
    //scroll-layers = <5>; //edited by yura 20250915
    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <22 10 11>;
        };

        ComboQ {
            bindings = <&kp Q>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp W               &kp E         &kp R       &kp T                        &kp Y                                     &kp Y             &kp U  &lt 5 I    &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D       &kp F                        &kp G        &kp H         &kp BACKSPACE  &kp H             &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z    &kp X         &kp C       &kp V                        &kp B        &kp DEL       &lt 2 B        &kp N             &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LEFT_WIN        &kp LEFT_ALT  &kp ESCAPE  &lt_to_layer_0 2 LANGUAGE_2  &lt 2 SPACE  &mkp MB1      &kp ENTER      &lt 2 LANGUAGE_1                             &kp RIGHT_COMMAND
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp KP_N1                   &kp KP_N2        &kp KP_N3        &kp KP_N4        &kp KP_N5                                                  &kp KP_N6        &kp KP_N7  &kp KP_N8  &kp KP_N9        &kp KP_N0
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION  &kp KP_N4  &kp KP_N5  &kp KP_NUMBER_6  &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3        &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                  &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH      &kp DOLLAR         &kp PERCENT                                   &kp AMPERSAND  &kp SQT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&kp LANGUAGE_1   &kp LANGUAGE_5     &kp LANG5     &kp LANG_KATAKANA  &kp LANG3    &kp LANGUAGE_4      &kp LANG2    &kp LANG1      &trans   &trans                &trans                 &trans
&trans           &kp NUMBER_1       &kp NUMBER_2  &kp NUMBER_3       &trans       &trans              &bootloader  &trans         &trans   &trans                &trans                 &bt BT_CLR
&trans           &trans             &trans        &trans             &trans       &trans              &trans       &trans                                                               &bt BT_CLR_ALL
            >;
        };

        NUMPAD {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &kp KP_N7  &kp KP_N8  &kp KP_NUMBER_9  &kp MINUS   &kp CARET
&trans  &trans  &trans  &trans  &trans  &trans      &trans     &kp KP_N4  &kp KP_N5  &kp KP_N6        &kp PLUS    &kp ASTERISK
&trans  &trans  &trans  &trans  &trans  &trans      &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3        &kp PERIOD  &kp SLASH
&trans  &trans  &trans  &trans  &trans  &trans      &kp ENTER  &trans                                             &trans
            >;
        };
    };
};
